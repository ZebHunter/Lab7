package server.utility;

import java.sql.*;

import common.utility.Console;

public class DatabaseHandler {
    //Table names
    public static final String WORKER_TABLE = "worker";
    public static final String USER_TABLE = "my_user";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String PERSON_TABLE = "person";
    public static final String LOCATION_TABLE = "location";
    //WORKER_TABLE column names
    public static final String WORKER_TABLE_ID_COLUMN = "id";
    public static final String WORKER_TABLE_NAME_COLUMN = "name";
    public static final String WORKER_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String WORKER_TABLE_SALARY_COLUMN = "salary";
    public static final String WORKER_TABLE_POSITION_COLUMN = "position";
    public static final String WORKER_TABLE_STATUS_COLUMN = "status";
    public static final String WORKER_TABLE_USER_ID_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    // COORDINATES_TABLE column names
    public static final String COORDINATES_TABLE_WORKER_ID_COLUMN = "worker_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";
    // PERSON_TABLE column names
    public static final String PERSON_TABLE_WORKER_ID_COLUMN = "worker_id";
    public static final String PERSON_TABLE_BIRTHDAY_COLUMN = "birthday";
    public static final String PERSON_TABLE_EYE_COLOR_COLUMN = "eye_color";
    public static final String PERSON_TABLE_HAIR_COLOR_COLUMN = "hair_color";
    public static final String PERSON_TABLE_COUNTRY_COLUMN = "country";
    // LOCATION_TABLE column names
    public static final String LOCATION_TABLE_WORKER_ID_COLUMN = "worker_id";
    public static final String LOCATION_TABLE_NAME_COLUMN = "name";
    public static final String LOCATION_TABLE_X_COLUMN = "x";
    public static final String LOCATION_TABLE_Y_COLUMN = "y";
    public static final String LOCATION_TABLE_Z_COLUMN = "z";

    private final String JDBC_DRIVER = "org.postgresql.Driver";
    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            initializeDB();
            Console.println("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            Console.printError("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            Console.printError("Драйвер управления базой данных не найден!");
        }
    }

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            throw new SQLException(exception);
        }
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
        } catch (SQLException exception) {
        }
    }

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Console.println("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Console.printError("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
        }
    }

    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
        }
    }

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
        }
    }

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
        }
    }

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
        }
    }

    private void initializeDB() throws SQLException {
        
        connection = DriverManager.getConnection(url, user, password);
        Statement statement = connection.createStatement();

        statement.execute("CREATE SEQUENCE IF NOT EXISTS users_id_seq INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647");

        statement.execute("CREATE SEQUENCE IF NOT EXISTS workers_id_seq INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647");

        statement.execute("CREATE TABLE IF NOT EXISTS " + USER_TABLE +
                " ( "
                + USER_TABLE_ID_COLUMN + " INT NOT NULL PRIMARY KEY DEFAULT NEXTVAL('users_id_seq'), "
                + USER_TABLE_USERNAME_COLUMN + " VARCHAR(255) NOT NULL UNIQUE CHECK (" + USER_TABLE_USERNAME_COLUMN + "!= ''), "
                + USER_TABLE_PASSWORD_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + USER_TABLE_PASSWORD_COLUMN + "!= '')" +
                ")"
        );
        statement.execute("CREATE TABLE IF NOT EXISTS " + WORKER_TABLE +
                " ( "
                + WORKER_TABLE_ID_COLUMN + " INT NOT NULL PRIMARY KEY DEFAULT NEXTVAL('workers_id_seq'), "
                + WORKER_TABLE_NAME_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + WORKER_TABLE_NAME_COLUMN + "!= ''), "
                + WORKER_TABLE_CREATION_DATE_COLUMN + " TIMESTAMP NOT NULL, "
                + WORKER_TABLE_SALARY_COLUMN + " INTEGER CHECK (" + WORKER_TABLE_SALARY_COLUMN + " >0), "
                + WORKER_TABLE_POSITION_COLUMN + " VARCHAR(10) NOT NULL CHECK ("
                + WORKER_TABLE_POSITION_COLUMN + " = 'HUMAN_RESOURCES' " +
                "OR " + WORKER_TABLE_POSITION_COLUMN + "= 'LEAD_DEVELOPER' " +
                "OR " + WORKER_TABLE_POSITION_COLUMN + "= 'BAKER'" + "), "
                + WORKER_TABLE_STATUS_COLUMN + "VARCHAR(10) NOT NULL CHECK ("
                + WORKER_TABLE_STATUS_COLUMN + " = 'FIRED' " + 
                "OR " + WORKER_TABLE_STATUS_COLUMN + " = 'RECOMEND_FOR_PROMOTION' "  +
                "OR " + WORKER_TABLE_STATUS_COLUMN + " = 'REGULAR' " +
                "OR " + WORKER_TABLE_STATUS_COLUMN + " = 'PROBATION' "
                + WORKER_TABLE_USER_ID_COLUMN + " INTEGER NOT NULL REFERENCES " + USER_TABLE + "(" + USER_TABLE_ID_COLUMN + ")" +
                ")"
        );

        statement.execute("CREATE TABLE IF NOT EXISTS " + PERSON_TABLE +
                " ( "
                + PERSON_TABLE_WORKER_ID_COLUMN + " INT NOT NULL REFERENCES " + WORKER_TABLE + "(" + WORKER_TABLE_ID_COLUMN + "), "
                + PERSON_TABLE_BIRTHDAY_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + PERSON_TABLE_BIRTHDAY_COLUMN + " != ''), "
                + PERSON_TABLE_EYE_COLOR_COLUMN + "VARCHAR(10) NOT NULL CHECK ("
                + PERSON_TABLE_EYE_COLOR_COLUMN + " = 'GREEN' " + 
                "OR " + PERSON_TABLE_EYE_COLOR_COLUMN + " = 'BLUE' "  +
                "OR " + PERSON_TABLE_EYE_COLOR_COLUMN + " = 'YELLOW' " +
                "OR " + PERSON_TABLE_EYE_COLOR_COLUMN + " = 'BROWN' " 
                + PERSON_TABLE_HAIR_COLOR_COLUMN + "VARCHAR(10) NOT NULL CHECK ("
                + PERSON_TABLE_HAIR_COLOR_COLUMN + " = 'GREEN' " + 
                "OR " + PERSON_TABLE_HAIR_COLOR_COLUMN + " = 'RED' "  +
                "OR " + PERSON_TABLE_HAIR_COLOR_COLUMN + " = 'BLACK' " +
                "OR " + PERSON_TABLE_HAIR_COLOR_COLUMN + " = 'BLUE' " +
                "OR " + PERSON_TABLE_HAIR_COLOR_COLUMN + " = 'BROWN' " 
                + PERSON_TABLE_COUNTRY_COLUMN + "VARCHAR(10) NOT NULL CHECK ("
                + PERSON_TABLE_COUNTRY_COLUMN + " = 'GERMANY' " + 
                "OR " + PERSON_TABLE_COUNTRY_COLUMN + " = 'SPAIN' "  +
                "OR " + PERSON_TABLE_COUNTRY_COLUMN + " = 'THAILAND' " +
                ")"
        );
        statement.execute("CREATE TABLE IF NOT EXISTS " + COORDINATES_TABLE +
                " ( "
                + COORDINATES_TABLE_WORKER_ID_COLUMN + " INT NOT NULL REFERENCES " + WORKER_TABLE + "(" + WORKER_TABLE_ID_COLUMN + "), "
                + COORDINATES_TABLE_X_COLUMN + " INT PRECISION NOT NULL, "
                + COORDINATES_TABLE_Y_COLUMN + " DOUBLE PRECISION NOT NULL" +
                ")"
        );

        statement.execute("CREATE TABLE IF NOT EXISTS " + LOCATION_TABLE +
                " ( "
                + LOCATION_TABLE_WORKER_ID_COLUMN + " INT NOT NULL REFERENCES " + WORKER_TABLE + "(" + WORKER_TABLE_ID_COLUMN + "), "
                + LOCATION_TABLE_NAME_COLUMN + " VARCHAR(255) NOT NULL CHECK (" + LOCATION_TABLE_NAME_COLUMN + " != ''), "
                + LOCATION_TABLE_X_COLUMN + " INTEGER PRECISION NOT NULL, "
                + LOCATION_TABLE_Y_COLUMN + " LONG PRECISION NOT NULL" 
                + LOCATION_TABLE_Z_COLUMN + " FLOAT PRECISION NOT NULL" +
                ")"
        );

    
}
}
